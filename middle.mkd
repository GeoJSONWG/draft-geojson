# Introduction

   GeoJSON is a format for encoding data about geographic features using
   JavaScript Object Notation (JSON) [RFC4627].  The format is concerned
   with features in the broadest sense; any thing with qualities that
   are bounded in geographical space may be a feature whether it is
   a physical structure or not.  The concepts in GeoJSON are not new;
   they are derived from pre-existing open geographic information system
   standards (for COM, SQL, and XML) and have been streamlined to better
   suit web application development using JSON.

   GeoJSON comprises the seven concrete geometry types defined in the
   OpenGIS Simple Features Implementation Specification for SQL
   [OGC99-049]: 0-dimensional Point and MultiPoint; 1-dimensional curve
   LineString and MultiLineString; 2-dimensional surface Polygon and
   MultiPolygon; and the heterogeneous GeometryCollection.  GeoJSON
   representations of instances of these geometry types are analogous to
   the well-known binary (WKB) and text (WKT) representations described
   in that same specification.

   GeoJSON also comprises the types Feature and FeatureCollection.
   Feature objects in GeoJSON contain a geometry object with one of the
   above geometry types and additional properties. A FeatureCollection
   object contains an array of feature objects.  This structure is
   analogous to that of the Web Feature Service (WFS) response to
   GetFeatures requests specified in [OGC02-058] or to a KML Folder of
   Placemarks [OGC07-147r2].  Some implementations of the WFS
   specification also provide GeoJSON formatted responses to GetFeature
   requests, but there is no particular service model or feature type
   ontology implied in the GeoJSON format specification.

   Since its initial publication in 2008 [GeoJSON-spec], the GeoJSON
   format specification has steadily grown in popularity.  It is widely
   used in JavaScript web mapping libraries, JSON-based document
   databases, and web APIs.

## Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

## Conventions Used in This Document

The ordering of the members of any JSON object defined in this document MUST be
considered irrelevant, as specified by [RFC4627].

Some examples use the combination of a JavaScript single line comment
(//) followed by an ellipsis (...) as placeholder notation for
content deemed irrelevant by the authors and at that point. These
placeholders must of course be deleted or otherwise replaced, before
attempting to validate the corresponding JSON code example.

## Definitions

* JavaScript Object Notation (JSON), and the terms object, name, value,
  array, number, true, false, and null are to be interpreted as
  defined in [RFC4627].

* The Uniform Resource Identifier (URI) is defined in [RFC3986].

* The Uniform Resource Name (URN) is defined in [RFC5165].

* Inside this document the term geometry types refers to the seven
  case-sensitive strings: "Point", "MultiPoint", "LineString",
  "MultiLineString", "Polygon", "MultiPolygon", and
  "GeometryCollection".

* As another shorthand notation the term GeoJSON types refers to the
  nine case-senisitve strings "Feature", "FeatureCollection" and those
  considered geometry types.

* A hole is considered, for the sake of illustration, as simply a
  geometric shape that is to be excluded from the geometric shape
  in which it appears.

* When using the term interior geometric shape it is assumed that
  there exists an exterior shape.

Note-sdrees: The last four items in the list above are added, to not
forget to satisfy the need of defining these terms (but not necessarily
at this place or in this form).

## Example

A GeoJSON feature collection:

    {
        "type": "FeatureCollection",
        "features": [{
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [102.0, 0.5]
            },
            "properties": {
                "prop0": "value0"
            }
        }, {
            "type": "Feature",
            "geometry": {
                "type": "LineString",
                "coordinates": [
                    [102.0, 0.0],
                    [103.0, 1.0],
                    [104.0, 0.0],
                    [105.0, 1.0]
                ]
            },
            "properties": {
                "prop0": "value0",
                "prop1": 0.0
            }
        }, {
            "type": "Feature",
            "geometry": {
                "type": "Polygon",
                "coordinates": [
                    [
                        [100.0, 0.0],
                        [101.0, 0.0],
                        [101.0, 1.0],
                        [100.0, 1.0],
                        [100.0, 0.0]
                    ]
                ]
            },
            "properties": {
                "prop0": "value0",
                "prop1": {
                    "this": "that"
                }
            }
        }]
    }

Note that unquoted whitespace is not significant in JSON.
Whitespace is used in the examples inside this document to help
illustrate the data structures, but is not required.

# GeoJSON Object

A complete GeoJSON data structure is always an object (in JSON terms).
In GeoJSON, an object consists of a collection of name/value pairs --
also called members. For each member, the name is always a string.
Member values are either a string, number, object, array or one of the
JSON literals: true, false, and null. An array consists of elements
where each element is a value as described above.

* The GeoJSON object MUST have one or more members (name/value pairs)
  including a member with the name "type". This member's value is a
  case-sensitive string that determines the type of the GeoJSON object
  by being one of GeoJSON types. If - depending on this
  value - additional rules apply, then these are stated in the
  following sections where each type is further defined.

* A GeoJSON object MAY have a "bbox" member. If it is present,
  the value of it MUST be a bounding box array (see
  "4. Bounding Box").

## Geometry Object

A geometry is a GeoJSON object where the type member's value is a
geometry type.

A GeoJSON geometry object of any type other than "GeometryCollection"
MUST have a member with the name "coordinates". The value of the
coordinates member is always an array. The structure for the elements
in this array is determined by the type of geometry.

### Position

A position is the fundamental geometry construct. The "coordinates"
member of a geometry object is composed of either:

* one position (in the case of a Point geometry),

* an array of positions (LineString or MultiPoint geometries),

* an array of arrays of positions (Polygons, MultiLineStrings),

* or a multidimensional array of positions (MultiPolygon).

A position is represented by an array of numbers. There MUST be two or
more elements. The first two elements will be World Geodetic System 1984
(WGS 84) longitude and latitude, precisely in that order, and
a third (optional element) will be altitude in meters.

Any number of additional elements are allowed -- interpretation and
meaning of additional elements is beyond the scope of this
specification.

Examples of positions and geometries are provided in "Appendix A.
Geometry Examples".

### Point

For type "Point", the "coordinates" member MUST be a single position.

### MultiPoint

For type "MultiPoint", the "coordinates" member MUST be an array of
positions.

### LineString

For type "LineString", the "coordinates" member MUST be an array of two
or more positions.

### MultiLineString

For type "MultiLineString", the "coordinates" member MUST be an array
of LineString coordinate arrays.

### Polygon

To specify a constraint specific to polygons, it is useful to introduce
the concept of a linear ring (LinearRing):

* A LinearRing is a closed LineString with 4 or more positions.

* The first and last positions are equivalent (they represent
  equivalent points).

Though a LinearRing is not explicitly represented as a GeoJSON geometry
type, it leads to a canonical formulation of the Polygon geometry type
definition as follows:

* For type "Polygon", the "coordinates" member MUST be an array of
  LinearRing coordinate arrays.

* For Polygons with more than one of these rings, the first MUST be the
  exterior ring and any others MUST be interior rings or holes.

### MultiPolygon

For type "MultiPolygon", the "coordinates" member MUST be an array of
Polygon coordinate arrays.

### Geometry Collection

A GeoJSON object with type "GeometryCollection" is a geometry object
which represents a collection of geometry objects.

A geometry collection MUST have a member with the name "geometries".
The value corresponding to "geometries" is an array. Each element in
this array is a GeoJSON geometry object.

## Feature Object

A GeoJSON object with the type "Feature" is a feature object.

* A feature object MUST have a member with the name "geometry". The
  value of the geometry member is a geometry object as defined above or
  a JSON null value.

* A feature object MUST have a member with the name "properties". The
  value of the properties member is an object (any JSON object or a
  JSON null value).

* If a feature has a commonly used identifier, that identifier SHOULD
  be included as a member of the feature object with the name "id".

## Feature Collection Object

A GeoJSON object with the type "FeatureCollection" is a feature
collection object.

An object of type "FeatureCollection" MUST have a member with the name
"features". The value corresponding to "features" is an array. Each
element in the array is a feature object as defined above.

# Coordinate Reference System (CRS)

The coordinate reference system of all GeoJSON objects is a geographic
coordinate reference system, using the WGS84 datum, and with longitude and
latitude units of decimal degrees. In an array of coordinate values,
longitude is first and is followed by latitude.

# Bounding Box

A GeoJSON object MAY have a member named "bbox" to include information
on the coordinate range for geometries, features, or feature
collections. The value of the bbox member MUST be an array of length
2*n where n is the number of dimensions represented in the contained
geometries, with the lowest values for all axes followed by the highest
values. The axes order of a bbox follows the axes order of geometries.

Example of a bbox member on a feature:

    {
        "type": "Feature",
        "bbox": [-180.0, -90.0, 180.0, 90.0],
        "geometry": {
            "type": "Polygon",
            "coordinates": [
                [
                    [-180.0, 10.0],
                    [20.0, 90.0],
                    [180.0, -5.0],
                    [-30.0, -90.0]
                ]
            ]
        }
        //...
    }

Example of a bbox member on a feature collection:

    {
        "type": "FeatureCollection",
        "bbox": [100.0, 0.0, 105.0, 1.0],
        "features": [
        //...
        ]
    }

# IANA Considerations

There are no IANA considerations beyond those in [RFC4267].

