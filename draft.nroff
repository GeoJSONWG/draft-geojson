.\" automatically generated by xml2rfc v2.4.1 on 2013-04-28T04:47:34Z

.pl 10.0i
.po 0
.ll 7.2i
.lt 7.2i
.nr LL 7.2i
.nr LT 7.2i
.hy 0
.ad l
.ds LH Internet-Draft
.ds CH GeoJSON Format Specification
.ds RH April 2013
.ds LF Butler, et al.
.ds CF Expires October 30, 2013
.ds RF FORMFEED[Page %]

.in 0
.nf
Independent                                                    H. Butler
Internet-Draft                                                 Hobu Inc.
Intended status: Informational                                   M. Daly
Expires: October 30, 2013                                        Cadcorp
                                                                A. Doyle
                                                                     MIT
                                                              S. Gillies
                                                         UNC-Chapel Hill
                                                          April 28, 2013
.fi


.ce 2
The Geospatial JavaScript Object Notation (GeoJSON) Format
Specification
.ce 1
draft-sdrees-geojson-format-spec-01

.ti 0
Abstract

.in 3
GeoJSON is a geospatial data interchange format based on JavaScript
Object Notation (JSON).

.ti 0
Status of This Memo

This Internet-Draft is submitted in full conformance with the
provisions of BCP 78 and BCP 79.

Internet-Drafts are working documents of the Internet Engineering
Task Force (IETF).  Note that other groups may also distribute
working documents as Internet-Drafts.  The list of current
Internet-Drafts is at \%http://datatracker.ietf.org/drafts/current/.
.bp

Internet-Drafts are draft documents valid for a maximum of six months
and may be updated, replaced, or obsoleted by other documents at any
time.  It is inappropriate to use Internet-Drafts as reference
material or to cite them other than as "work in progress."

This Internet-Draft will expire on October 30, 2013.

.ti 0
Copyright Notice

Copyright (c) 2013 IETF Trust and the persons identified as the
document authors.  All rights reserved.

This document is subject to BCP 78 and the IETF Trust's Legal
Provisions Relating to IETF Documents
(\%http://trustee.ietf.org/license-info) in effect on the date of
publication of this document.  Please review these documents
carefully, as they describe your rights and restrictions with respect
to this document.  Code Components extracted from this document must
include Simplified BSD License text as described in Section 4.e of
the Trust Legal Provisions and are provided without warranty as
described in the Simplified BSD License.

.ti 0
1.  Introduction

Geospatial JavaScript Object Notation (GeoJSON) is a format for
encoding a variety of geographic data structures.  A GeoJSON object
may represent a geometry, a feature, or a collection of features.

GeoJSON supports the following seven geometry types:

.in 6
.ti 3
o  Point

.ti 3
o  LineString

.ti 3
o  Polygon

.ti 3
o  MultiPoint

.ti 3
o  MultiLineString

.ti 3
o  MultiPolygon

.ti 3
o  GeometryCollection
.bp

.in 3
Features in GeoJSON contain a geometry object and additional
properties, and a feature collection represents a list of features.

A complete GeoJSON data structure is always an object (in JSON
terms).  In GeoJSON, an object consists of a collection of name/value
pairs -- also called members.  For each member, the name is always a
string.  Member values are either a string, number, object, array or
one of the JSON literals: true, false, and null.  An array consists
of elements where each element is a value as described above.

.ti 0
1.1.  Conventions Used in This Document

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in [RFC2119].

Some examples use the combination of a JavaScript single line comment
(//) followed by an ellipsis (...) as placeholder notation for
content deemed irrelevant by the authors and at that point.  These
placeholders must of course be deleted or otherwise replaced, before
attempting to validate the corresponding JSON code example.

.ti 0
1.2.  Definitions

.in 6
.ti 3
o  JavaScript Object Notation (JSON), and the terms object, name,
value, array, number, true, false, and null are to be interpreted as
defined in [RFC4627].

.ti 3
o  The Hypertext Transfer Protocol (http) is defined in [RFC2616].

.ti 3
o  Transport Layer Security (TLS) is defined in [RFC5246].

.ti 3
o  Hypertext Transfer Protocol Over TLS (https) is defined in
[RFC2818].

.ti 3
o  The Uniform Resource Identifier (URI) is defined in [RFC3986].

.ti 0
1.3.  Example

.in 3
A GeoJSON feature collection:
.nf
.bp

{
    "type": "FeatureCollection",
    "features": [{
        "type": "Feature",
        "geometry": {
            "type": "Point",
            "coordinates": [102.0, 0.5]
        },
        "properties": {
            "prop0": "value0"
        }
    }, {
        "type": "Feature",
        "geometry": {
            "type": "LineString",
            "coordinates": [
                [102.0, 0.0],
                [103.0, 1.0],
                [104.0, 0.0],
                [105.0, 1.0]
            ]
        },
        "properties": {
            "prop0": "value0",
            "prop1": 0.0
        }
    }, {
        "type": "Feature",
        "geometry": {
            "type": "Polygon",
            "coordinates": [
                [
                    [100.0, 0.0],
                    [101.0, 0.0],
                    [101.0, 1.0],
                    [100.0, 1.0],
                    [100.0, 0.0]
                ]
            ]
        },
        "properties": {
            "prop0": "value0",
            "prop1": {
                "this": "that"
            }
        }
    }]
}
.fi


Note that unquoted whitespace is not significant in JSON.  Whitespace
is used in the examples inside this document to help illustrate the
data structures, but is not required.
.bp

.ti 0
2.  GeoJSON Object

As stated in the introduction, a complete Geospatial JSON (GeoJSON)
data structure is always represented as a single JSON object that
represents a geometry, feature, or collection of features and will be
referred to as the GeoJSON object in this document.

.in 6
.ti 3
o  The GeoJSON object MUST have one or more members (name/value
pairs) including a member with the name "type".  This member's value
is a case-sensitive string that determines the type of the GeoJSON
object by being one of the names: "Point", "MultiPoint",
"LineString", "MultiLineString", "Polygon", "MultiPolygon",
"GeometryCollection", "Feature", or "FeatureCollection".  If -
depending on this value additional rules apply - these are stated in
the following sections further describing each type.

.ti 3
o  A GeoJSON object MAY have an optional "crs" member.  If it is
present, the value of it MUST be a valid coordinate reference system
reference (see "3.  Coordinate Reference System (CRS) Reference
[1]").

.ti 3
o  A GeoJSON object MAY have a "bbox" member.  If it is present, the
value of it MUST be a bounding box array (see "4.  Bounding Box").

.ti 0
2.1.  Geometry Object

.in 3
A geometry is a GeoJSON object where the type member's value is one
of the following strings: "Point", "MultiPoint", "LineString",
"MultiLineString", "Polygon", "MultiPolygon", or
"GeometryCollection".

A GeoJSON geometry object of any type other than "GeometryCollection"
MUST have a member with the name "coordinates".  The value of the
coordinates member is always an array.  The structure for the
elements in this array is determined by the type of geometry.

.ti 0
2.1.1.  Position

A position is the fundamental geometry construct.  The "coordinates"
member of a geometry object is composed of one position (in the case
of a Point geometry), an array of positions (LineString or MultiPoint
geometries), an array of arrays of positions (Polygons,
MultiLineStrings), or a multidimensional array of positions
(MultiPolygon).
.bp

A position is represented by an array of numbers.  There MUST be two
or more elements.  The order of elements must follow x, y, z order
(easting, northing, altitude for coordinates in a projected
coordinate reference system, or longitude, latitude, altitude for
coordinates in a geographic coordinate reference system).  Any number
of additional elements are allowed -- interpretation and meaning of
additional elements is beyond the scope of this specification.

Examples of positions and geometries are provided in "Appendix A.
Geometry Examples".

.ti 0
2.1.2.  Point

For type "Point", the "coordinates" member MUST be a single position.

.ti 0
2.1.3.  MultiPoint

For type "MultiPoint", the "coordinates" member MUST be an array of
positions.

.ti 0
2.1.4.  LineString

For type "LineString", the "coordinates" member MUST be an array of
two or more positions.

A LinearRing is a closed LineString with 4 or more positions.  The
first and last positions are equivalent (they represent equivalent
points).  Though a LinearRing is not explicitly represented as a
GeoJSON geometry type, it is referred to in the Polygon geometry type
definition.

.ti 0
2.1.5.  MultiLineString

For type "MultiLineString", the "coordinates" member MUST be an array
of LineString coordinate arrays.

.ti 0
2.1.6.  Polygon

For type "Polygon", the "coordinates" member MUST be an array of
LinearRing coordinate arrays.  For Polygons with multiple rings, the
first MUST be the exterior ring and any others MUST be interior rings
or holes.

.ti 0
2.1.7.  MultiPolygon

For type "MultiPolygon", the "coordinates" member MUST be an array of
Polygon coordinate arrays.

.bp
.ti 0
2.1.8.  Geometry Collection

A GeoJSON object with type "GeometryCollection" is a geometry object
which represents a collection of geometry objects.

A geometry collection MUST have a member with the name "geometries".
The value corresponding to "geometries" is an array.  Each element in
this array is a GeoJSON geometry object.

.ti 0
2.2.  Feature Object

A GeoJSON object with the type "Feature" is a feature object.

.in 6
.ti 3
o  A feature object MUST have a member with the name "geometry".  The
value of the geometry member is a geometry object as defined above or
a JSON null value.

.ti 3
o  A feature object MUST have a member with the name "properties".
The value of the properties member is an object (any JSON object or a
JSON null value).

.ti 3
o  If a feature has a commonly used identifier, that identifier
SHOULD be included as a member of the feature object with the name
"id".

.ti 0
2.3.  Feature Collection Object

.in 3
A GeoJSON object with the type "FeatureCollection" is a feature
collection object.

An object of type "FeatureCollection" MUST have a member with the
name "features".  The value corresponding to "features" is an array.
Each element in the array is a feature object as defined above.

.ti 0
3.  Coordinate Reference System (CRS) Reference

The coordinate reference system of a GeoJSON object is determined by
its "crs" member (referred to as the CRS reference below).  If an
object has no crs member, then its parent or grandparent object's crs
member may be acquired.  If no crs member can be so acquired, the
default CRS shall apply to the GeoJSON object.

.in 6
.ti 3
o  The default CRS is a geographic coordinate reference system, using
the WGS84 datum, and with longitude and latitude units of decimal
.bp
degrees.  Note-sdrees: FIXME mail from Adrian Custer states as *the
two GeoJSON crs* CRS84 (an axis-flipped WGS84) and CRSGoogle
(EPGS:3857).  So is this really WGS84 mentioned as default?

.ti 3
o  The value of a member named "crs" must be a string (referred to as
the CRS reference below) or JSON null.  If the value of CRS is null,
no CRS can be assumed.  Note-sdrees: FIXME or default CRS as when crs
member is left out?

.ti 3
o  The crs member SHOULD be on the top-level GeoJSON object in a
hierarchy (in feature collection, feature, geometry order) and not be
repeated or overridden on children or grandchildren of the object.

.ti 3
o  The referenced CRS SHALL NOT change coordinate ordering (see
"2.1.1 Position").

.ti 0
3.1.  Named CRS Reference

.in 3
A CRS reference MAY indicate a coordinate reference system by name.
In this case, the value of it MUST be a string identifying a
coordinate reference system.  OGC CRS URNs such as
"urn:ogc:def:crs:OGC:1.3:CRS84" SHALL be preferred over legacy
identifiers such as "EPSG:4326":
.nf

"crs": "urn:ogc:def:crs:OGC:1.3:CRS84"
.fi


.ti 0
3.2.  Linked CRS Reference

A CRS reference may link to CRS parameters on the Web.  In this case,
its value MUST be a dereferenceable http or https URL and the
producer of a GeoJSON object SHOULD and is strongly encouraged to
prefer absolute URLs over relative URLs as value to ease the
disambiguation from a named CRS reference for the consumer of the
object.

.ti 0
4.  Bounding Box
.bp

A GeoJSON object MAY have a member named "bbox" to include
information on the coordinate range for geometries, features, or
feature collections.  The value of the bbox member MUST be a array of
length 2*n where n is the number of dimensions represented in the
contained geometries, with the lowest values for all axes followed by
the highest values.  The axes order of a bbox follows the axes order
of geometries.  In addition, the coordinate reference system for the
bbox is assumed to match the coordinate reference system of the
GeoJSON object of which it is a member.

Example of a bbox member on a feature:
.nf

{
    "type": "Feature",
    "bbox": [-180.0, -90.0, 180.0, 90.0],
    "geometry": {
        "type": "Polygon",
        "coordinates": [
            [
                [-180.0, 10.0],
                [20.0, 90.0],
                [180.0, -5.0],
                [-30.0, -90.0]
            ]
        ]
    }
    //...
}
.fi


Example of a bbox member on a feature collection:
.nf

{
    "type": "FeatureCollection",
    "bbox": [100.0, 0.0, 105.0, 1.0],
    "features": [
    //...
    ]
}
.fi


.ti 0
5.  Security Considerations

This memo raises no security issues.

.ti 0
6.  IANA Considerations

This document has no actions for IANA.
.bp

.ti 0
7.  References

.ti 0
7.1.  Normative References

.in 14
.ti 3
[RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
Requirement Levels", BCP 14, RFC 2119, March 1997.

.ti 3
[RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext Transfer
Protocol -- HTTP/1.1", RFC 2616, June 1999.

.ti 3
[RFC2818]  Rescorla, E., "HTTP Over TLS", RFC 2818, May 2000.

.ti 3
[RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
Resource Identifier (URI): Generic Syntax", STD 66, RFC 3986, January
2005.

.ti 3
[RFC4627]  Crockford, D., "The application/json Media Type for
JavaScript Object Notation (JSON)", RFC 4627, July 2006.

.ti 0
7.2.  Informative References

.ti 3
[RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
(TLS) Protocol Version 1.2", RFC 5246, August 2008.

.ti 0
Appendix A.  Geometry Examples

.in 3
Each of the examples below represents a valid and complete GeoJSON
object.

.ti 0
A.1.  Point

Point coordinates are in x, y order (easting, northing for projected
coordinates, longitude, latitude for geographic coordinates):
.bp
.nf

  {
      "type": "Point",
      "coordinates": [100.0, 0.0]
  }
.fi


.ti 0
A.2.  LineString

Coordinates of LineString are an array of positions (see "2.1.1.
Position"):
.nf

  {
      "type": "LineString",
      "coordinates": [
          [100.0, 0.0],
          [101.0, 1.0]
      ]
  }
.fi


.ti 0
A.3.  Polygon

Coordinates of a Polygon are an array of LinearRing coordinate
arrays.  The first element in the array represents the exterior ring.
Any subsequent elements represent interior rings (or holes).

No holes:
.nf

  {
      "type": "Polygon",
      "coordinates": [
          [
              [100.0, 0.0],
              [101.0, 0.0],
              [101.0, 1.0],
              [100.0, 1.0],
              [100.0, 0.0]
          ]
      ]
  }
.fi


With holes:
.nf
.bp

  {
      "type": "Polygon",
      "coordinates": [
          [
              [100.0, 0.0],
              [101.0, 0.0],
              [101.0, 1.0],
              [100.0, 1.0],
              [100.0, 0.0]
          ],
          [
              [100.2, 0.2],
              [100.8, 0.2],
              [100.8, 0.8],
              [100.2, 0.8],
              [100.2, 0.2]
          ]
      ]
  }
.fi


.ti 0
A.4.  MultiPoint

Coordinates of a MultiPoint are an array of positions::
.nf

  {
      "type": "MultiPoint",
      "coordinates": [
          [100.0, 0.0],
          [101.0, 1.0]
      ]
  }
.fi


.ti 0
A.5.  MultiLineString

Coordinates of a MultiLineString are an array of LineString
coordinate arrays:
.nf
.bp

  {
      "type": "MultiLineString",
      "coordinates": [
          [
              [100.0, 0.0],
              [101.0, 1.0]
          ],
          [
              [102.0, 2.0],
              [103.0, 3.0]
          ]
      ]
  }
.fi


.ti 0
A.6.  MultiPolygon

Coordinates of a MultiPolygon are an array of Polygon coordinate
arrays:
.bp
.nf

  {
      "type": "MultiPolygon",
      "coordinates": [
          [
              [
                  [102.0, 2.0],
                  [103.0, 2.0],
                  [103.0, 3.0],
                  [102.0, 3.0],
                  [102.0, 2.0]
              ]
          ],
          [
              [
                  [100.0, 0.0],
                  [101.0, 0.0],
                  [101.0, 1.0],
                  [100.0, 1.0],
                  [100.0, 0.0]
              ],
              [
                  [100.2, 0.2],
                  [100.8, 0.2],
                  [100.8, 0.8],
                  [100.2, 0.8],
                  [100.2, 0.2]
              ]
          ]
      ]
  }
.fi


.ti 0
A.7.  GeometryCollection

Each element in the geometries array of a GeometryCollection is one
of the geometry objects described above:
.nf

  {
      "type": "GeometryCollection",
      "geometries": [{
          "type": "Point",
          "coordinates": [100.0, 0.0]
      }, {
          "type": "LineString",
          "coordinates": [
              [101.0, 0.0],
              [102.0, 1.0]
          ]
      }]
  }
.bp
.fi


.ti 0
Appendix B.  Contributors

.in 6
.ti 3
o  Howard Butler (Hobu Inc.),

.ti 3
o  Martin Daly (Cadcorp),

.ti 3
o  Allan Doyle (MIT),

.ti 3
o  Sean Gillies (UNC-Chapel Hill),

.ti 3
o  Tim Schaub (OpenGeo),

.ti 3
o  Christopher Schmidt (MetaCarta)

.in 3
The GeoJSON format specification is the product of discussion on the
GeoJSON list:

http://lists.geojson.org/listinfo.cgi/geojson-geojson.org

.ti 0
Authors' Addresses
.nf

H. Butler
Hobu Inc.
.fi

.nf

M. Daly
Cadcorp
.fi

.nf

A. Doyle
MIT
.fi

.nf

S. Gillies
UNC-Chapel Hill
.bp
.fi

