<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY pandocMiddle PUBLIC "" "middle.xml">
<!ENTITY pandocBack PUBLIC "" "back.xml">
<!ENTITY pandocRef2119 PUBLIC "" "bib/reference.RFC.2119.xml">
<!ENTITY pandocRef2616 PUBLIC "" "bib/reference.RFC.2616.xml">
<!ENTITY pandocRef2818 PUBLIC "" "bib/reference.RFC.2818.xml">
<!ENTITY pandocRef3986 PUBLIC "" "bib/reference.RFC.3986.xml">
<!ENTITY pandocRef4627 PUBLIC "" "bib/reference.RFC.4627.xml">
<!ENTITY pandocRef5165 PUBLIC "" "bib/reference.RFC.5165.xml">
<!ENTITY pandocRef5246 PUBLIC "" "bib/reference.RFC.5246.xml">
]>
<rfc ipr="trust200902" category="info" docName="draft-sdrees-geojson-format-spec-01" obsoletes="" updates="" submissionType="IETF" xml:lang="en">
  <?rfc toc="yes"?>
  <!--generate a table of contents -->
  <?rfc symrefs="yes"?>
  <!--use anchors instead of numbers for references -->
  <?rfc sortrefs="yes" ?>
  <!--alphabetize the references -->
  <?rfc compact="yes" ?>
  <!--conserve vertical whitespace -->
  <?rfc subcompact="no" ?>
  <!--but keep a blank line between list items -->
  <front>
    <title abbrev="GeoJSON Format Specification">The Geospatial JavaScript Object Notation (GeoJSON) Format Specification</title>
    <author initials="H." surname="Butler" fullname="H. Butler">
      <organization>Hobu Inc.</organization>
    </author>
    <author initials="M." surname="Daly" fullname="M. Daly">
      <organization>Cadcorp</organization>
    </author>
    <author initials="A." surname="Doyle" fullname="A. Doyle">
      <organization>MIT</organization>
    </author>
    <author initials="S." surname="Gillies" fullname="S. Gillies">
      <organization>UNC-Chapel Hill</organization>
    </author>
    <!--<author initials="T." surname="Schaub" fullname="T. Schaub"> <organization>OpenGeo</organization> </author>-->
    <!--<author initials="C." surname="Schmidt" fullname="C. Schmidt"> <organization>MetaCarta</organization> </author>-->
    <!--<author initials="S." surname="Drees" fullname="S. Drees"> <organization>Editor</organization> <address> <postal> <street>Rheinaustr. 62</street> <street></street> <city>Bonn</city> <region></region> <code>53225</code> <country>DE</country> </postal> <phone></phone> <email>stefan@drees.name</email> <uri>http://sdre.es/</uri> </address> </author> -->
    <date month="April" year="2013"/>
    <area>General</area>
    <workgroup>Independent</workgroup>
    <keyword>RFC</keyword>
    <keyword>Request for Comments</keyword>
    <keyword>I-D</keyword>
    <keyword>Internet-Draft</keyword>
    <keyword>JSON</keyword>
    <keyword>Geospatial</keyword>
    <keyword>JavaScript Object Notation</keyword>
    <abstract>
      <t>GeoJSON is a geospatial data interchange format based on JavaScript Object Notation (JSON).  </t>
    </abstract>
  </front>
  <middle><!--This document was prepared using Pandoc2rfc https://github.com/miekg/pandoc2rfc --><section title="Introduction" anchor="introduction" toc="default"><t>Geospatial JavaScript Object Notation (GeoJSON) is a format for encoding a variety of geographic data structures. A GeoJSON object may represent a geometry, a feature, or a collection of features.  </t><t>GeoJSON supports the following seven geometry types: </t><t><list style="symbols"><t>Point </t><t>LineString </t><t>Polygon </t><t>MultiPoint </t><t>MultiLineString </t><t>MultiPolygon </t><t>GeometryCollection </t></list></t><t>Two additional types are comprised by GeoJSON: </t><t><list style="symbols"><t>Feature </t><t>FeatureCollection </t></list></t><t>Fetures in GeoJSON contain a geometry object and additional properties, and a feature collection represents a list of features.  </t><t>A complete GeoJSON data structure is always an object (in JSON terms). In GeoJSON, an object consists of a collection of name/value pairs -- also called members. For each member, the name is always a string. Member values are either a string, number, object, array or one of the JSON literals: true, false, and null.  An array consists of elements where each element is a value as described above.  </t><section title="Conventions Used in This Document" anchor="conventions-used-in-this-document" toc="default"><t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].  </t><t>The ordering of the members of any JSON object defined in this document MUST be considered irrelevant, as specified by [RFC4627].  </t><t>The ordering of the elements of any JSON array defined in this document MUST at least follow a stable ordering unless the specific object's type it is a member of defines an absolute ordering, which then takes precedence.  </t><t>Some examples use the combination of a JavaScript single line comment (//) followed by an ellipsis (...) as placeholder notation for content deemed irrelevant by the authors and at that point.  These placeholders must of course be deleted or otherwise replaced, before attempting to validate the corresponding JSON code example.  </t><t>Note-sdrees: The second and third paragraph of this section have been added, to not forget to satisfy the need of issueing structural constraints with strong impact on interoperability (but not necessarily at this place or in this form).  </t></section><section title="Definitions" anchor="definitions" toc="default"><t><list style="symbols"><t>JavaScript Object Notation (JSON), and the terms object, name, value, array, number, true, false, and null are to be interpreted as defined in [RFC4627].  </t><t>The Hypertext Transfer Protocol (http) is defined in [RFC2616].  </t><t>Transport Layer Security (TLS) is defined in [RFC5246].  </t><t>Hypertext Transfer Protocol Over TLS (https) is defined in [RFC2818].  </t><t>The Uniform Resource Identifier (URI) is defined in [RFC3986].  </t><t>The Uniform Resource Name (URN) is defined in [RFC5165].  </t><t>Inside this document the term geometry types refers to the seven case-sensitive strings: "Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon", and "GeometryCollection".  </t><t>As another shorthand notation the term GeoJSON types refers to the nine case-senisitve strings "Feature", "FeatureCollection" and those considered geometry types.  </t><t>A hole is considered - for the sake of illustration - as simply a geometric shape, that is to be excluded from the geometric shape it appears in.  </t><t>When using the term interior geometric shape it is assumed, that there exists an exterior shape so that the former is fully included inside the convex hull of the latter.  </t></list></t><t>Note-sdrees: The last four items in the list above are added, to not forget to satisfy the need of defining these terms (but not necessarily at this place or in this form).  </t><t>Note-sdrees: We should consider adding at least an optional member on the top-level GeoJSON object with name "namespace" and a value of say "http://geojson.org/ns/geojson" or maybe something (after acceptance by the IETF like "http://docs.ietf.org/ns/rfc9876" hypothetically assuming this ends up as RFC9876) but then we might have also to adapt the "no action needed from IANA section". Then we might somewhere have a section "Namespace" explaining it in general and amend its usage with: </t><t><list style="symbols"><t>The namespace member SHOULD be on the top-level GeoJSON object in the following canonical hierarchical ordering, i.e. if present on a feature collection, else if present on a feature, else on a geometry and MUST NOT be repeated or overridden on children or grandchildren of the object.  </t></list></t><t>Motivation for above proposal: The benefit would be, that we a) remain backwards compatible, but b) avoid future clashes with JSON of unclear provenience when being consumed by the client.  Alternatively one might prefix all wonderful type names with say "geo" and a dot or so (not preferred) or even the names of the members (shiver).  </t></section><section title="Example" anchor="example" toc="default"><t>A GeoJSON feature collection: </t><figure title="" suppress-title="false" align="left" alt="" width="" height=""><artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
{
    "type": "FeatureCollection",
    "features": [{
        "type": "Feature",
        "geometry": {
            "type": "Point",
            "coordinates": [102.0, 0.5]
        },
        "properties": {
            "prop0": "value0"
        }
    }, {
        "type": "Feature",
        "geometry": {
            "type": "LineString",
            "coordinates": [
                [102.0, 0.0],
                [103.0, 1.0],
                [104.0, 0.0],
                [105.0, 1.0]
            ]
        },
        "properties": {
            "prop0": "value0",
            "prop1": 0.0
        }
    }, {
        "type": "Feature",
        "geometry": {
            "type": "Polygon",
            "coordinates": [
                [
                    [100.0, 0.0],
                    [101.0, 0.0],
                    [101.0, 1.0],
                    [100.0, 1.0],
                    [100.0, 0.0]
                ]
            ]
        },
        "properties": {
            "prop0": "value0",
            "prop1": {
                "this": "that"
            }
        }
    }]
}
</artwork></figure><t>Note that unquoted whitespace is not significant in JSON.  Whitespace is used in the examples inside this document to help illustrate the data structures, but is not required.  </t></section></section><section title="GeoJSON Object" anchor="geojson-object" toc="default"><t>As stated in the introduction, a complete Geospatial JSON (GeoJSON) data structure is always represented as a single JSON object that represents a geometry, feature, or collection of features and will be referred to as the GeoJSON object in this document.  </t><t><list style="symbols"><t>The GeoJSON object MUST have one or more members (name/value pairs) including a member with the name "type". This member's value is a case-sensitive string that determines the type of the GeoJSON object by being one of GeoJSON types. If - depending on this value - additional rules apply, then these are stated in the following sections where each type is further defined.  </t><t>A GeoJSON object MAY have an optional "crsURN" member. If it is present, the value of it MUST be a valid coordinate reference system reference (see "<eref target="rfc.section.3">3. Coordinate Reference System (CRS) Reference</eref>").  </t><t>A GeoJSON object MAY have a "bbox" member. If it is present, the value of it MUST be a bounding box array (see "4.  Bounding Box").  </t></list></t><section title="Geometry Object" anchor="geometry-object" toc="default"><t>A geometry is a GeoJSON object where the type member's value is a geometry type.  </t><t>A GeoJSON geometry object of any type other than "GeometryCollection" MUST have a member with the name "coordinates". The value of the coordinates member is always an array. The structure for the elements in this array is determined by the type of geometry.  </t><section title="Position" anchor="position" toc="default"><t>A position is the fundamental geometry construct. The "coordinates" member of a geometry object is composed of either: </t><t><list style="symbols"><t>one position (in the case of a Point geometry), </t><t>an array of positions (LineString or MultiPoint geometries), </t><t>an array of arrays of positions (Polygons, MultiLineStrings), </t><t>or a multidimensional array of positions (MultiPolygon).  </t></list></t><t>A position is represented by an array of numbers. There MUST be two or more elements. The order of elements must follow x, y, z order that is: </t><t><list style="symbols"><t>easting, northing, altitude for coordinates in a projected coordinate reference system, or </t><t>longitude, latitude, altitude for coordinates in a geographic coordinate reference system.  </t></list></t><t>Any number of additional elements are allowed -- interpretation and meaning of additional elements is beyond the scope of this specification.  </t><t>Examples of positions and geometries are provided in "Appendix A. Geometry Examples".  </t></section><section title="Point" anchor="point" toc="default"><t>For type "Point", the "coordinates" member MUST be a single position.  </t></section><section title="MultiPoint" anchor="multipoint" toc="default"><t>For type "MultiPoint", the "coordinates" member MUST be an array of positions.  </t></section><section title="LineString" anchor="linestring" toc="default"><t>For type "LineString", the "coordinates" member MUST be an array of two or more positions.  </t></section><section title="MultiLineString" anchor="multilinestring" toc="default"><t>For type "MultiLineString", the "coordinates" member MUST be an array of LineString coordinate arrays.  </t></section><section title="Polygon" anchor="polygon" toc="default"><t>To specify a constraint specific to polygons, it is useful to introduce the concept of a linear ring (LinearRing): </t><t><list style="symbols"><t>A LinearRing is a closed LineString with 4 or more positions.  </t><t>The first and last positions are equivalent (they represent equivalent points).  </t></list></t><t>Though a LinearRing is not explicitly represented as a GeoJSON geometry type, it leads to a canonical formulation of the Polygon geometry type definition as follows: </t><t><list style="symbols"><t>For type "Polygon", the "coordinates" member MUST be an array of LinearRing coordinate arrays.  </t><t>For Polygons with more than one of these rings, the first MUST be the exterior ring and any others MUST be interior rings or holes.  </t></list></t></section><section title="MultiPolygon" anchor="multipolygon" toc="default"><t>For type "MultiPolygon", the "coordinates" member MUST be an array of Polygon coordinate arrays.  </t></section><section title="Geometry Collection" anchor="geometry-collection" toc="default"><t>A GeoJSON object with type "GeometryCollection" is a geometry object which represents a collection of geometry objects.  </t><t>A geometry collection MUST have a member with the name "geometries". The value corresponding to "geometries" is an array. Each element in this array is a GeoJSON geometry object.  </t></section></section><section title="Feature Object" anchor="feature-object" toc="default"><t>A GeoJSON object with the type "Feature" is a feature object.  </t><t><list style="symbols"><t>A feature object MUST have a member with the name "geometry". The value of the geometry member is a geometry object as defined above or a JSON null value.  </t><t>A feature object MUST have a member with the name "properties". The value of the properties member is an object (any JSON object or a JSON null value).  </t><t>If a feature has a commonly used identifier, that identifier SHOULD be included as a member of the feature object with the name "id".  </t></list></t></section><section title="Feature Collection Object" anchor="feature-collection-object" toc="default"><t>A GeoJSON object with the type "FeatureCollection" is a feature collection object.  </t><t>An object of type "FeatureCollection" MUST have a member with the name "features". The value corresponding to "features" is an array. Each element in the array is a feature object as defined above.  </t></section></section><section title="Coordinate Reference System (CRS)" anchor="coordinate-reference-system-crs" toc="default"><t>The coordinate reference system of a GeoJSON object is determined by the value of its "crsURN" member (referred to as the CRS reference below). If an object has no crsURN member, then its parent or grandparent object's crsURN member may be acquired. If no crsURN member can be so acquired, the default CRS shall apply to the GeoJSON object.  </t><t><list style="symbols"><t>The default CRS is a geographic coordinate reference system, using the WGS84 datum, and with longitude and latitude units of decimal degrees. Note-sdrees: FIXME mail from Adrian Custer states as <spanx style="strong" xml:space="preserve">the two GeoJSON crs</spanx> CRS84 (an axis-flipped WGS84) and CRSGoogle (EPGS:3857). So is this really WGS84 mentioned as default? </t><t>The value of a member named "crsURN" must be a string (referred to as the CRS reference below) or JSON null. If the value of "crsURN" is null, no CRS can be assumed. Note-sdrees: FIXME or default CRS as when crsURN member is left out? It is optional anyway.  </t><t>The crsURN member SHOULD be on the top-level GeoJSON object in the following canonical hierarchical ordering, i.e. if present on a feature collection, else if present on a feature, else on a geometry and MUST NOT be repeated or overridden on children or grandchildren of the object.  </t><t>The referenced CRS SHALL NOT change coordinate ordering (see "2.1.1 Position").  </t></list></t><t>Note-sdrees: The name has been changed from crs to crsURN to not irritate consumers that expect the crs object as of version 1.0 in the community spec.  </t><t>If present the CRS reference MUST indicate a coordinate reference system by name. In this case, the value of it MUST be a string identifying a coordinate reference system. OGC CRS URNs such as "urn:ogc:def:crs:OGC:1.3:CRS84" SHALL be preferred over legacy identifiers such as "EPSG:4326": </t><figure title="" suppress-title="false" align="left" alt="" width="" height=""><artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
"crsURN": "urn:ogc:def:crs:OGC:1.3:CRS84"
</artwork></figure><t>For the format of a valid URN cf. [RFC5165].  </t></section><section title="Bounding Box" anchor="bounding-box" toc="default"><t>A GeoJSON object MAY have a member named "bbox" to include information on the coordinate range for geometries, features, or feature collections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with the lowest values for all axes followed by the highest values. The axes order of a bbox follows the axes order of geometries. In addition, the coordinate reference system for the bbox is assumed to match the coordinate reference system of the GeoJSON object of which it is a member.  </t><t>Example of a bbox member on a feature: </t><figure title="" suppress-title="false" align="left" alt="" width="" height=""><artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
{
    "type": "Feature",
    "bbox": [-180.0, -90.0, 180.0, 90.0],
    "geometry": {
        "type": "Polygon",
        "coordinates": [
            [
                [-180.0, 10.0],
                [20.0, 90.0],
                [180.0, -5.0],
                [-30.0, -90.0]
            ]
        ]
    }
    //...
}
</artwork></figure><t>Example of a bbox member on a feature collection: </t><figure title="" suppress-title="false" align="left" alt="" width="" height=""><artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
{
    "type": "FeatureCollection",
    "bbox": [100.0, 0.0, 105.0, 1.0],
    "features": [
    //...
    ]
}
</artwork></figure></section> <section title="Security Considerations" toc="default"><t>This memo raises no security issues.</t></section><section title="IANA Considerations" toc="default"><t>This document has no actions for IANA.</t></section></middle>
  <back><references title="Normative References"><reference anchor="RFC2119"><front><title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement Levels</title><author initials="S." surname="Bradner" fullname="Scott Bradner"><organization>Harvard University</organization><address><postal><street>1350 Mass. Ave.</street><street>Cambridge</street><street>MA 02138</street></postal><phone>- +1 617 495 3864</phone><email>sob@harvard.edu</email></address></author><date year="1997" month="March"/><area>General</area><keyword>keyword</keyword><abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized.  This document defines these words as they should be interpreted in IETF documents.  Authors who follow these guidelines should incorporate this phrase near the beginning of their document: <list><t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119.  </t></list></t><t>Note that the force of these words is modified by the requirement level of the document in which they are used.  </t></abstract></front><seriesInfo name="BCP" value="14"/><seriesInfo name="RFC" value="2119"/><format type="TXT" octets="4723" target="http://www.rfc-editor.org/rfc/rfc2119.txt"/><format type="HTML" octets="17970" target="http://xml.resource.org/public/rfc/html/rfc2119.html"/><format type="XML" octets="5777" target="http://xml.resource.org/public/rfc/xml/rfc2119.xml"/></reference> <reference anchor="RFC2616"><front><title abbrev="HTTP/1.1">Hypertext Transfer Protocol -- HTTP/1.1</title><author initials="R." surname="Fielding" fullname="Roy T. Fielding"><organization abbrev="UC Irvine">Department of Information and Computer Science</organization><address><postal><street>University of California, Irvine</street><city>Irvine</city><region>CA</region><code>92697-3425</code></postal><facsimile>+1(949)824-1715</facsimile><email>fielding@ics.uci.edu</email></address></author><author initials="J." surname="Gettys" fullname="James Gettys"><organization abbrev="Compaq/W3C">World Wide Web Consortium</organization><address><postal><street>MIT Laboratory for Computer Science, NE43-356</street><street>545 Technology Square</street><city>Cambridge</city><region>MA</region><code>02139</code></postal><facsimile>+1(617)258-8682</facsimile><email>jg@w3.org</email></address></author><author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul"><organization abbrev="Compaq">Compaq Computer Corporation</organization><address><postal><street>Western Research Laboratory</street><street>250 University Avenue</street><city>Palo Alto</city><region>CA</region><code>94305</code></postal><email>mogul@wrl.dec.com</email></address></author><author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen"><organization abbrev="W3C/MIT">World Wide Web Consortium</organization><address><postal><street>MIT Laboratory for Computer Science, NE43-356</street><street>545 Technology Square</street><city>Cambridge</city><region>MA</region><code>02139</code></postal><facsimile>+1(617)258-8682</facsimile><email>frystyk@w3.org</email></address></author><author initials="L." surname="Masinter" fullname="Larry Masinter"><organization abbrev="Xerox">Xerox Corporation</organization><address><postal><street>MIT Laboratory for Computer Science, NE43-356</street><street>3333 Coyote Hill Road</street><city>Palo Alto</city><region>CA</region><code>94034</code></postal><email>masinter@parc.xerox.com</email></address></author><author initials="P." surname="Leach" fullname="Paul J. Leach"><organization abbrev="Microsoft">Microsoft Corporation</organization><address><postal><street>1 Microsoft Way</street><city>Redmond</city><region>WA</region><code>98052</code></postal><email>paulle@microsoft.com</email></address></author><author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee"><organization abbrev="W3C/MIT">World Wide Web Consortium</organization><address><postal><street>MIT Laboratory for Computer Science, NE43-356</street><street>545 Technology Square</street><city>Cambridge</city><region>MA</region><code>02139</code></postal><facsimile>+1(617)258-8682</facsimile><email>timbl@w3.org</email></address></author><date year="1999" month="June"/><abstract><t>The Hypertext Transfer Protocol (HTTP) is an application-level protocol for distributed, collaborative, hypermedia information systems. It is a generic, stateless, protocol which can be used for many tasks beyond its use for hypertext, such as name servers and distributed object management systems, through extension of its request methods, error codes and headers . A feature of HTTP is the typing and negotiation of data representation, allowing systems to be built independently of the data being transferred.  </t><t>HTTP has been in use by the World-Wide Web global information initiative since 1990. This specification defines the protocol referred to as "HTTP/1.1", and is an update to RFC 2068 .  </t></abstract></front><seriesInfo name="RFC" value="2616"/><format type="TXT" octets="422317" target="http://www.rfc-editor.org/rfc/rfc2616.txt"/><format type="PS" octets="5529857" target="http://www.rfc-editor.org/rfc/rfc2616.ps"/><format type="PDF" octets="550558" target="http://www.rfc-editor.org/rfc/rfc2616.pdf"/><format type="HTML" octets="637302" target="http://xml.resource.org/public/rfc/html/rfc2616.html"/><format type="XML" octets="493420" target="http://xml.resource.org/public/rfc/xml/rfc2616.xml"/></reference> <reference anchor="RFC2818"><front><title>HTTP Over TLS</title><author initials="E." surname="Rescorla" fullname="E. Rescorla"><organization/></author><date year="2000" month="May"/><abstract><t>This memo describes how to use Transport Layer Security (TLS) to secure Hypertext Transfer Protocol (HTTP) connections over the Internet.  This memo provides information for the Internet community.</t></abstract></front><seriesInfo name="RFC" value="2818"/><format type="TXT" octets="15170" target="http://www.rfc-editor.org/rfc/rfc2818.txt"/></reference> <reference anchor="RFC3986"><front><title abbrev="URI Generic Syntax">Uniform Resource Identifier (URI): Generic Syntax</title><author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee"><organization abbrev="W3C/MIT">World Wide Web Consortium</organization><address><postal><street>Massachusetts Institute of Technology</street><street>77 Massachusetts Avenue</street><city>Cambridge</city><region>MA</region><code>02139</code><country>USA</country></postal><phone>+1-617-253-5702</phone><facsimile>+1-617-258-5999</facsimile><email>timbl@w3.org</email><uri>http://www.w3.org/People/Berners-Lee/</uri></address></author><author initials="R." surname="Fielding" fullname="Roy T. Fielding"><organization abbrev="Day Software">Day Software</organization><address><postal><street>5251 California Ave., Suite 110</street><city>Irvine</city><region>CA</region><code>92617</code><country>USA</country></postal><phone>+1-949-679-2960</phone><facsimile>+1-949-679-2972</facsimile><email>fielding@gbiv.com</email><uri>http://roy.gbiv.com/</uri></address></author><author initials="L." surname="Masinter" fullname="Larry Masinter"><organization abbrev="Adobe Systems">Adobe Systems Incorporated</organization><address><postal><street>345 Park Ave</street><city>San Jose</city><region>CA</region><code>95110</code><country>USA</country></postal><phone>+1-408-536-3024</phone><email>LMM@acm.org</email><uri>http://larry.masinter.net/</uri></address></author><date year="2005" month="January"/><area>Applications</area><keyword>uniform resource identifier</keyword><keyword>URI</keyword><keyword>URL</keyword><keyword>URN</keyword><keyword>WWW</keyword><keyword>resource</keyword><abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  </t></abstract></front><seriesInfo name="STD" value="66"/><seriesInfo name="RFC" value="3986"/><format type="TXT" octets="141811" target="http://www.rfc-editor.org/rfc/rfc3986.txt"/><format type="HTML" octets="214067" target="http://xml.resource.org/public/rfc/html/rfc3986.html"/><format type="XML" octets="163534" target="http://xml.resource.org/public/rfc/xml/rfc3986.xml"/></reference> <reference anchor="RFC4627"><front><title>The application/json Media Type for JavaScript Object Notation (JSON)</title><author initials="D." surname="Crockford" fullname="D. Crockford"><organization/></author><date year="2006" month="July"/><abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.  This memo provides information for the Internet community.</t></abstract></front><seriesInfo name="RFC" value="4627"/><format type="TXT" octets="16319" target="http://www.rfc-editor.org/rfc/rfc4627.txt"/></reference> <reference anchor="RFC5165"><front><title>A Uniform Resource Name (URN) Namespace for the Open Geospatial Consortium (OGC)</title><author initials="C." surname="Reed" fullname="C. Reed"><organization/></author><date year="2008" month="April"/><abstract><t>This document describes a Uniform Resource Name (URN) namespace that is engineered by the Open Geospatial Consortium (OGC) for naming persistent resources published by the OGC.  The formal Namespace IDentifier (NID) is "ogc".  This memo provides information for the Internet community.</t></abstract></front><seriesInfo name="RFC" value="5165"/><format type="TXT" octets="14681" target="http://www.rfc-editor.org/rfc/rfc5165.txt"/></reference> </references><references title="Informative References"><reference anchor="RFC5246"><front><title>The Transport Layer Security (TLS) Protocol Version 1.2</title><author initials="T." surname="Dierks" fullname="T. Dierks"><organization/></author><author initials="E." surname="Rescorla" fullname="E. Rescorla"><organization/></author><date year="2008" month="August"/><abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. [STANDARDS-TRACK]</t></abstract></front><seriesInfo name="RFC" value="5246"/><format type="TXT" octets="222395" target="http://www.rfc-editor.org/rfc/rfc5246.txt"/></reference> </references><!--This document was prepared using Pandoc2rfc https://github.com/miekg/pandoc2rfc --><section title="Geometry Examples" anchor="geometry-examples" toc="default"><t>Each of the examples below represents a valid and complete GeoJSON object.  </t><section title="Point" anchor="point" toc="default"><t>Point coordinates are in x, y order (easting, northing for projected coordinates, longitude, latitude for geographic coordinates): </t><figure title="" suppress-title="false" align="left" alt="" width="" height=""><artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
  {
      "type": "Point",
      "coordinates": [100.0, 0.0]
  }
</artwork></figure></section><section title="LineString" anchor="linestring" toc="default"><t>Coordinates of LineString are an array of positions (see "2.1.1. Position"): </t><figure title="" suppress-title="false" align="left" alt="" width="" height=""><artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
  {
      "type": "LineString",
      "coordinates": [
          [100.0, 0.0],
          [101.0, 1.0]
      ]
  }
</artwork></figure></section><section title="Polygon" anchor="polygon" toc="default"><t>Coordinates of a Polygon are an array of LinearRing (cf.  "2.1.6 Polygon") coordinate arrays. The first element in the array represents the exterior ring. Any subsequent elements represent interior rings (or holes).  </t><t>No holes: </t><figure title="" suppress-title="false" align="left" alt="" width="" height=""><artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
  {
      "type": "Polygon",
      "coordinates": [
          [
              [100.0, 0.0],
              [101.0, 0.0],
              [101.0, 1.0],
              [100.0, 1.0],
              [100.0, 0.0]
          ]
      ]
  }
</artwork></figure><t>With holes: </t><figure title="" suppress-title="false" align="left" alt="" width="" height=""><artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
  {
      "type": "Polygon",
      "coordinates": [
          [
              [100.0, 0.0],
              [101.0, 0.0],
              [101.0, 1.0],
              [100.0, 1.0],
              [100.0, 0.0]
          ],
          [
              [100.2, 0.2],
              [100.8, 0.2],
              [100.8, 0.8],
              [100.2, 0.8],
              [100.2, 0.2]
          ]
      ]
  }
</artwork></figure></section><section title="MultiPoint" anchor="multipoint" toc="default"><t>Coordinates of a MultiPoint are an array of positions:: </t><figure title="" suppress-title="false" align="left" alt="" width="" height=""><artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
  {
      "type": "MultiPoint",
      "coordinates": [
          [100.0, 0.0],
          [101.0, 1.0]
      ]
  }
</artwork></figure></section><section title="MultiLineString" anchor="multilinestring" toc="default"><t>Coordinates of a MultiLineString are an array of LineString coordinate arrays: </t><figure title="" suppress-title="false" align="left" alt="" width="" height=""><artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
  {
      "type": "MultiLineString",
      "coordinates": [
          [
              [100.0, 0.0],
              [101.0, 1.0]
          ],
          [
              [102.0, 2.0],
              [103.0, 3.0]
          ]
      ]
  }
</artwork></figure></section><section title="MultiPolygon" anchor="multipolygon" toc="default"><t>Coordinates of a MultiPolygon are an array of Polygon coordinate arrays: </t><figure title="" suppress-title="false" align="left" alt="" width="" height=""><artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
  {
      "type": "MultiPolygon",
      "coordinates": [
          [
              [
                  [102.0, 2.0],
                  [103.0, 2.0],
                  [103.0, 3.0],
                  [102.0, 3.0],
                  [102.0, 2.0]
              ]
          ],
          [
              [
                  [100.0, 0.0],
                  [101.0, 0.0],
                  [101.0, 1.0],
                  [100.0, 1.0],
                  [100.0, 0.0]
              ],
              [
                  [100.2, 0.2],
                  [100.8, 0.2],
                  [100.8, 0.8],
                  [100.2, 0.8],
                  [100.2, 0.2]
              ]
          ]
      ]
  }
</artwork></figure></section><section title="GeometryCollection" anchor="geometrycollection" toc="default"><t>Each element in the geometries array of a GeometryCollection is one of the geometry objects described above: </t><figure title="" suppress-title="false" align="left" alt="" width="" height=""><artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
  {
      "type": "GeometryCollection",
      "geometries": [{
          "type": "Point",
          "coordinates": [100.0, 0.0]
      }, {
          "type": "LineString",
          "coordinates": [
              [101.0, 0.0],
              [102.0, 1.0]
          ]
      }]
  }
</artwork></figure></section></section><section title="Contributors" anchor="contributors" toc="default"><t><list style="symbols"><t>Howard Butler (Hobu Inc.), </t><t>Martin Daly (Cadcorp), </t><t>Allan Doyle (MIT), </t><t>Sean Gillies (UNC-Chapel Hill), </t><t>Tim Schaub (OpenGeo), </t><t>Christopher Schmidt (MetaCarta) </t></list></t><t>The GeoJSON format specification is the product of discussion on the GeoJSON list: </t><t>http://lists.geojson.org/listinfo.cgi/geojson-geojson.org </t></section> </back>
</rfc>
