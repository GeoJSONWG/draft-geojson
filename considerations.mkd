# Security Considerations

   GeoJSON shares security issues common to all JSON content types.  See
   [RFC7159] Section 12 for additional information. GeoJSON does not
   provide executable content.

   As with other geographic data formats, e.g., [KMLv2.2], providing
   details about the locations of sensitive persons, animals, habitats,
   and facilities can expose them to unauthorized tracking or injury.
   GeoJSON does not provide privacy or integrity services; if sensitive
   data requires privacy or integrity protection the service must be
   provided externally.

# Interoperability Considerations

## I-JSON

GeoJSON texts SHOULD follow the constraints of I-JSON [RFC7493] for
maximum interoperability.

## Coordinate Precision

The size of a GeoJSON text in bytes is a major interoperability
consideration and precision of coordinate values has a large impact on
the size of texts.  A GeoJSON text containing many detailed polygons can
be inflated almost by a factor of two by increasing coordinate precision
from 6 to 15 decimal places. For geographic coordinates with units of
degrees, 6 decimal places (a default common in, e.g., sprintf) amounts
to about 10 centimeters, a precision well within that of current GPS
systems.  Implementations should consider the cost to using a greater
precision than necessary.

## Coordinate Order

   There are conflicting precedents among geographic data formats over
   whether latitude or longitude come first in a pair of numbers.
   Longitude comes first in GeoJSON coordinates as it does in [KMLv2.2].

   Some commonly-used CRS definitions specify coordinate ordering that
   is not longitude then latitude (for a geographic CRS) or easting then
   northing (for a projected CRS). The CRS historically known as
   "EPSG:4326" and more accurately identified by 
   "http://www.opengis.net/def/crs/EPSG/0/4326" is a prime example.
   Using such a CRS is NOT RECOMMENDED due to the potential disruption
   of interoperability. When such a CRS is encountered in GeoJSON, the
   document should be processed with caution.  Heuristics may be
   necessary to interpret the coordinates properly; they may not be in
   the required longitude, latitude order.

## Bounding boxes

   In representing features that cross the dateline or the poles, 
   following the ring-orientation best practice (counter-clockwise 
   external rings, clockwise internal rings) and ensuring your 
   bounding boxes use the south-west corner as the first coordinate
   will improve interoperability. Remain aware that software that
   represents edges as straight cartesian lines and software that
   represents edges as great circles will have different interpretations
   of edges, which vary more the longer the edges are. Try to
   avoid edges of more than 180 degrees in length as far as possible.


# Extensibility

In GeoJSON, an "extension" is any property not defined in section 2.
Consuming implementations that encounter unfamiliar extensions MUST NOT
stop processing or signal an error and MUST continue processing the
items as if those properties were not present. Note that support for
extensions can vary across implementations and no normative processing
model for extensions is defined. Accordingly, implementations that rely
too heavily on the use of extensions may experience reduced
interoperability with other implementations.

## GeoJSON types are fixed

Implementations MUST NOT extend the fixed set of GeoJSON types:
FeatureCollection, Feature, Point, LineString, MultiPoint, Polygon,
MultiLineString, MultiPolygon, and GeometryCollection.

## Semantics of GeoJSON properties are fixed

Implementations MUST NOT change the the semantics of GeoJSON properties.

## Re-serialization of extensions

Implementations that parse and then reserialize GeoJSON documents that
contain extension properties SHOULD take sufficient care to ensure that
extension properties used within the original document are preserved and
serialized appropriately.

## Aggregation of extensions

Implementations that collect and aggregate GeoJSON objects from multiple
sources may often need to deal with conflicting or incompatible
extensions.
